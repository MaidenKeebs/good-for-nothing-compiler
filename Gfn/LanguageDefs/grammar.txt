<statement> := <variable_creation>
	| <variable_assignment>
	| <function_call>

<variable_creation> := <data_type> <identifier> = <expression>
<variable_assignment> := <identifier> = <expression>
<function_call> := <stdlib_function_call> | <user_defined_function_call>

<stdlib_function_call> := @<module>:<identifer>(<parameter>[, <parameter>]*)
<user_defined_function_call> := @identifier(<parameter>[, <parameter>]*)

<data_type> := integer | string | boolean

<expression> := <identifier> | <integer_literal>+ | <string_literal>

<identifier> := <char>+
<integer_literal> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<string_literal> := "<character_literal>*"

<character_ltieral> := 'a..z | A..Z | 0..9 | <special_character_literal>'
<special_character_literal> := (anything but a " mark)

###############################################################################
<stmt> := var <ident> = <expr>
	| <ident> = <expr>
	| for <ident> = <expr> to <expr> do <stmt> end
	| read_int <ident>
	| read_string <ident>
	| print <expr>
	| call <ident> ( <parameter> [, <parameter>]* )
	| <stmt> ; <stmt>

<expr> := <string>
	| <int>
	| <bin_expr>
	| <ident>

<parameter> := <string> | <int> | <ident>

<arith_expr> := <expr> <arith_op> <expr>
<arith_op> := + | - | * | /

<ident> := <char> <ident_rest>*
<ident_rest> := <char> | <digit>

<int> := <digit>+
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<string> := " <string_elem>* "
<string_elem> := <any char other than ">
